//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs/GenericActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Armageddon.Inputs
{
    public partial class @GenericActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GenericActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GenericActions"",
    ""maps"": [
        {
            ""name"": ""GenericCharacter"",
            ""id"": ""ccc69684-d5f7-4b75-baf9-405d0e76d940"",
            ""actions"": [
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""13e44cb9-98c7-4133-a991-9e12cd9858da"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Charge"",
                    ""type"": ""Value"",
                    ""id"": ""6671e54a-cc82-42a4-9b37-9476015c8ed1"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""680ecbc2-a3b7-4e16-a38e-84e53953e101"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""KeyboardArrows"",
                    ""id"": ""e2ab96e4-970e-43ea-aa31-b48ebddc243c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5d10f5ff-2cd9-4ef9-b294-284fd55fd5b1"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""3d55abec-d29a-4953-88ac-3f7e9866f194"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""GenericPadLeftStick"",
                    ""id"": ""ecb2dc5a-044c-400a-b0b4-86f07cfcf5c1"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""40628f65-ddb6-4b6c-aed1-e7ba089767c5"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0b89b985-0efd-4e1a-bf36-be67af670cc6"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""KeyboardArrows"",
                    ""id"": ""4a5d3d4b-103e-4965-acc2-0ae022c9c28a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Charge"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e482b7e1-f7e6-4a36-b601-40e527052567"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Charge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""52b0ef31-7470-4184-b90c-54e6a2b79ba8"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Charge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""GenericPadTriggers"",
                    ""id"": ""bb2e7200-7c5a-4220-b08c-66b789006f2f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Charge"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ab2a410a-7716-474d-bbcb-43ebb625495f"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Charge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f04bb0af-ebcc-4a45-9df3-dcd3e4a52b68"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Charge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f2e05f66-8dfa-46f2-87c8-0e07219ff602"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8816396a-8316-44fa-b19a-9bb0cf7b90da"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // GenericCharacter
            m_GenericCharacter = asset.FindActionMap("GenericCharacter", throwIfNotFound: true);
            m_GenericCharacter_Rotate = m_GenericCharacter.FindAction("Rotate", throwIfNotFound: true);
            m_GenericCharacter_Charge = m_GenericCharacter.FindAction("Charge", throwIfNotFound: true);
            m_GenericCharacter_Shoot = m_GenericCharacter.FindAction("Shoot", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // GenericCharacter
        private readonly InputActionMap m_GenericCharacter;
        private List<IGenericCharacterActions> m_GenericCharacterActionsCallbackInterfaces = new List<IGenericCharacterActions>();
        private readonly InputAction m_GenericCharacter_Rotate;
        private readonly InputAction m_GenericCharacter_Charge;
        private readonly InputAction m_GenericCharacter_Shoot;
        public struct GenericCharacterActions
        {
            private @GenericActions m_Wrapper;
            public GenericCharacterActions(@GenericActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Rotate => m_Wrapper.m_GenericCharacter_Rotate;
            public InputAction @Charge => m_Wrapper.m_GenericCharacter_Charge;
            public InputAction @Shoot => m_Wrapper.m_GenericCharacter_Shoot;
            public InputActionMap Get() { return m_Wrapper.m_GenericCharacter; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GenericCharacterActions set) { return set.Get(); }
            public void AddCallbacks(IGenericCharacterActions instance)
            {
                if (instance == null || m_Wrapper.m_GenericCharacterActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GenericCharacterActionsCallbackInterfaces.Add(instance);
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @Charge.started += instance.OnCharge;
                @Charge.performed += instance.OnCharge;
                @Charge.canceled += instance.OnCharge;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
            }

            private void UnregisterCallbacks(IGenericCharacterActions instance)
            {
                @Rotate.started -= instance.OnRotate;
                @Rotate.performed -= instance.OnRotate;
                @Rotate.canceled -= instance.OnRotate;
                @Charge.started -= instance.OnCharge;
                @Charge.performed -= instance.OnCharge;
                @Charge.canceled -= instance.OnCharge;
                @Shoot.started -= instance.OnShoot;
                @Shoot.performed -= instance.OnShoot;
                @Shoot.canceled -= instance.OnShoot;
            }

            public void RemoveCallbacks(IGenericCharacterActions instance)
            {
                if (m_Wrapper.m_GenericCharacterActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGenericCharacterActions instance)
            {
                foreach (var item in m_Wrapper.m_GenericCharacterActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GenericCharacterActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GenericCharacterActions @GenericCharacter => new GenericCharacterActions(this);
        public interface IGenericCharacterActions
        {
            void OnRotate(InputAction.CallbackContext context);
            void OnCharge(InputAction.CallbackContext context);
            void OnShoot(InputAction.CallbackContext context);
        }
    }
}
